
# Configure script for SCons

try:
    Import('qemu_env')
    env = qemu_env
except:
    env = Environment()
    env['CC'] = "g++"
    env['LDFLAGS'] = ""

env.Append(CCFLAGS = "-O2 -g")

# Set default parameters
prefix = ""
static = False
cross_prefix = ""
cc = env['CC']
audio_drv_list = []
audio_card_list = "ac97 es1370 sb16"
audio_possible_cards = "ac97 es1370 sb16 cs4231a adlib gus"
host_cc = env['CC']
ar = "ar"
make = "make"
install = "install"
strip = "strip"

def exit_with_error():
    ret_str = "Failure"
    Return('ret_str')

# Test functions
# Add all the custom tests to following dict
# so it will be added to conf object
custom_tests = {}

def CheckCPUDefine(context, type):
    check_def_src = """
    #if !defined(%s)
    #error Not Define
    #endif
    int main(void) { return 0; }
    """ % (type)
    res = context.TryLink(check_def_src, '.cpp')
    context.Result(res)
    return res
custom_tests['CheckCPUDefine'] = CheckCPUDefine

def CheckNPTL(context):
    check_nptl_src = """
    #include <sched.h>
    #include <linux/futex.h>
    void foo() {
    #if !defined(CLONE_SETTLS) || !defined(FUTEX_WAIT)
    #error bork
    #endif
    }
    """
    res = context.TryLink(check_nptl_src, '.cpp')
    context.Result(res)
    return res
custom_tests['CheckNPTL'] = CheckNPTL

def CheckSDLX11Driver(context):
    check_sdl_src = """
    #include <SDL.h>
    #if defined(SDL_VIDEO_DRIVER_X11)
    #include <X11/XKBlib.h>
    #else
    #error No X11 support
    #endif
    int main(void) {return 0;}
    """
    res = context.TryLink(check_sdl_src, '.cpp')
    context.Result(res)
    return res
custom_tests['CheckSDLX11Driver'] = CheckSDLX11Driver

def CheckAudioDriver(context, drv, hdr, lib, exp):
    check_aud_src = """
    #include <%s>
    int main(void) { %s }
    """ % (hdr, exp)
    print check_aud_src
    print type(context)
    context.AppendLIBS(lib)
    res = context.TryRun(check_aud_src, '.cpp')[0]
    context.Result(res)
    return res
custom_tests['CheckAudioDriver'] = CheckAudioDriver

def CheckBrlAPI(context):
    check_brlapi_src = """
    #include <brlapi.h>
    int main(void) { return brlapi_openConnection(NULL, NULL, NULL); }
    """
    res = context.TryRun(check_brlapi_src, '.cpp')[0]
    context.Result(res)
    return res
custom_tests['CheckBrlAPI'] = CheckBrlAPI

def CheckIovec(context):
    check_iovec_src = """
    #include <sys/types.h>
    #include <sys/uio.h>
    #include <unistd.h>
    int main(void) { struct iovec iov; return 0; }
    """
    res = context.TryLink(check_iovec_src, '.cpp')
    context.Result(res)
    return res
custom_tests['CheckIovec'] = CheckIovec

# Start testing
conf = Configure(env, custom_tests = custom_tests)

# First check if C compiler works or not
compile_test_src = """
int main(void) {return 0;}
"""
if not conf.TryLink(compile_test_src, '.cpp'):
    print("ERROR: %s either does not exist or does not work" % cc)
    exit_with_error()

# Get the CPU type
if conf.CheckCPUDefine("__i386__"):
    env['cpu'] = "i386"
elif conf.CheckCPUDefine("__x86_64__"):
    env['cpu'] = "x86_64"
else :
    print("ERROR: Unsupported type of host")
    exit_with_error()

# We currently support only one type of virtual machine target
env['target_list'] = "x86_64-softmmu"

gprof=False
sparse=False
bigendian=False
mingw32=False
EXESUF=""
gdbstub=True
slirp=True
vde=True
fmod_lib=""
fmod_inc=""
oss_lib=""
vnc_tls=True
bsd=False
linux=False
solaris=False
kqemu=False
profiler=False
cocoa=False
check_gfx=True
softmmu=True
linux_user=False
darwin_user=False
bsd_user=False
build_docs=False
uname_release=""
curses=True
aio=True
nptl=True
mixemu=False
bluez=True
kvm=False
kerneldir=""
aix=False
blobs=True
fdt=True
sdl_x11=False

# Check target OS
if conf.CheckCPUDefine("__linux__"):
    env['targetos'] = "Linux"
else:
    print("ERROR: Unsupported target OS, use Linux")
    exit_with_error()

audio_drv_list = "oss"
audio_possible_drivers = "oss sdl esd pa"
usb = "linux"
linux_user = True

CFLAGS = "%s -O2 -g -fno-strict-aliasing" % (env['CCFLAGS'])
CFLAGS += " -Wall -Wundef -Wendif-labels -Wwrite-strings -Wmissing-prototypes -Wstrict-prototypes -Wredundant-decls"
LDFLAGS = "-g" 
LDFLAGS += " -Wl,--warn-common"

ARCH_CFLAGS = ""
ARCH_LDFLAGS = ""
OS_CFLAGS = ""
OS_LDFLAGS = ""
hostlongbits = "32"
if env['cpu'] == "i386":
    ARCH_CFLAGS = "-m32"
    ARCH_LDFLAGS = "-m32"
else :
    ARCH_CFLAGS = "-m64"
    ARCH_LDFLAGS = "-m64"
    hostlongbits = "64"


# Fix endianess 
bigendian = False

# Check NPTL
if not conf.CheckNPTL():
    env['nptl'] = False
else:
    env['nptl'] = True

# zlib check
if not conf.CheckLibWithHeader('z', 'zlib.h', 'c'):
    print("ERROR: zlib check failed")
    print("Make sure you have zlib library and headers installed")
    exit_with_error()

# SDL probe
sdl_config = "sdl-config"
sdl = None
sdl_static = None

try:
    pared = env.ParseConfig("sdl-config --cflags --libs --static-libs")
    env['sdl'] = True
except OSError:
    env['sdl'] = False

if not conf.CheckSDLX11Driver():
    print("ERROR: SDL library not found")
    exit_with_error()

# VNC TLS detection
try:
    env.ParseConfig("pkg-config --cflags --libs gnutls")
    env['vnc_tls'] = True
except OSError:
    print("VNC TLS support not found, TLS support disabled")
    env['vnc_tls'] = False

# vde libraries probe
if not conf.CheckLib('vdeplug'):
    #print("VDE library not found, VDE disabled")
    env['vde'] = False
else:
    env['vde'] = True

# Audio support
a_drv = ""
a_hdr = ""
a_lib = ""
a_exp = ""
a_check_req = True
for aud_drv in audio_drv_list.split():
    if aud_drv == "alsa":
        a_drv = "alsa"
        a_hdr = "alsa/asoundlib.h"
        a_lib = "asound"
        a_exp = "snd_pcm_t **handle; return snd_pcm_close(*handle);"
    elif aud_drv == "esd":
        a_drv = "esd"
        a_hdr = "esd.h"
        a_lib = "esd"
        a_exp = "return esd_play_stream(0, 0, \"\", 0);"
    elif aud_drv in ["oss", "sdl", "core", "wav", "dsound"]:
        a_drv = aud_drv
        a_check_req = False
    else:
        print("ERROR: Unknown type of audio driver support")
        print("Please select from: alsa, esd, oss, sdl, wav, core \
                dsound")
        exit_with_error()

env['aud_lib'] = ""
if a_check_req == False:
    env['audio_drv'] = a_drv
    if a_drv == "oss":
        env['aud_lib'] = oss_lib
elif conf.CheckAudioDriver(a_drv, a_hdr, a_lib, a_exp):
    env['audio_drv'] = a_drv
else:
    print("ERROR: Can't configure audio %s" % a_drv)
    print("Please install supported libs and headers for %s" % a_drv)
    exit_with_error()

# BrlAPI probe
if conf.CheckBrlAPI():
    env['brlapi'] = True
else:
    env['brlapi'] = False

# curses probe
if conf.CheckLibWithHeader('curses', 'curses.h', 'c'):
    env['curses'] = True
else:
    env['curses'] = False

# bluez support probe
try:
    env.ParseConfig("pkg-config --cflags --libs bluez")
    env['bluez'] = True
except OSError:
    env['bluez'] = False

# We disable KVM by default in configuration
env['kvm'] = False
# We disable KQEMU by default
env['kqemu'] = False

# AIO probe
AIOLIBS = ""
if conf.CheckLibWithHeader('pthread', 'pthread.h', 'c'):
    env['aio'] = True
    AIOLIBS = "pthread"
else:
    env['aio'] = False

# iovec probe
if conf.CheckIovec():
    env['iovec'] = True
else:
    env['iovec'] = False

# fdt probe
if conf.CheckLib('fdt'):
    env['fdt'] = True
else:
    env['fdt'] = False

# Check Header files
if conf.CheckCHeader('signal.h') and conf.CheckCHeader('time.h'):
    env['rt'] = True
    if conf.CheckLib('rt'):
        AIOLIBS += " rt"
else:
    env['rt'] = False

env['bios_dir'] = "qemu/pc-bios"
import os
env['source_path'] = os.getcwd()

config_h_name = "%s/config-host.h" % (env['source_path'])
config_h = open(config_h_name, 'w')
config_h.write("// Automatically generated by SConfigure - do not modify\n")
config_h.write("#define CONFIG_QEMU_SHAREDIR \"%s\"\n" % env['bios_dir'])

if env['cpu'] == "i386":
    env['arch'] = "i386"
    config_h.write("#define HOST_I386 1\n")
elif env['cpu'] == "x86_64":
    env['arch'] = "x86_64"
    config_h.write("#define HOST_X86_64 1\n")
else:
    print("ERROR: Unsupported CPU type %s\n" % cpu)
    exit_with_error()

if bigendian == True:
    config_h.write("#define WORDS_BIGENDIAN 1\n")

config_h.write("#define HOST_LONG_BITS %s\n" % hostlongbits)

if conf.CheckCHeader('byteswap.h'):
    config_h.write("#define HAVE_BYTESWAP_H 1\n")

if conf.CheckCHeader('machine/bswap.h'):
    config_h.write("#define HAVE_MACHINE_BSWAP_H 1\n")

if gdbstub == True:
    config_h.write("#define CONFIG_GDBSTUB 1\n")
env['gdbstub'] = gdbstub

if gprof == True:
    config_h.write("#define HAVE_GPROF 1\n")
env['gprof'] = gprof

if static == True:
    config_h.write("#define CONFIG_STATIC 1\n")
env['static'] = static 

if profiler == True:
    config_h.write("#define CONFIG_PROFILER 1\n")

if slirp == True:
    config_h.write("#define CONFIG_SLIRP 1\n")
env['slirp'] = slirp 

if env['vde']:
    config_h.write("#define CONFIG_VDE 1\n")

for card in audio_card_list.split():
    card = card.upper()
    config_h.write("#define CONFIG_%s 1\n" % card)
    env[card] = True

config_h.write("#define AUDIO_DRIVERS \\\n")
for drv in env['audio_drv'].split():
    config_h.write("\t&%s_audio_driver, \\\n" % drv)
    env[drv] = True
config_h.write("\n")

if mixemu == True:
    config_h.write("#define CONFIG_MIXEMU 1\n")
env['mixemu'] = mixemu

if env['vnc_tls']:
    config_h.write("#define CONFIG_VNC_TLS 1\n")

qemu_version = open("%s/VERSION" % (env['source_path']), 'r').readline()
env['qemu_version'] = qemu_version
config_h.write("#define QEMU_VERSION \"%s\"\n" % qemu_version.strip())


if env['sdl']:
    config_h.write("#define CONFIG_SDL 1\n")

if cocoa == True:
    config_h.write("#define CONFIG_COCOA 1\n")
env['cocoa'] = cocoa

if env['curses']:
    config_h.write("#define CONFIG_CURSES 1\n")

if env['brlapi']:
    config_h.write("#define CONFIG_BRLAPI 1\n")

if env['bluez']:
    config_h.write("#define CONFIG_BLUEZ 1\n")

if env['aio']:
    config_h.write("#define CONFIG_AIO 1\n")

if env['iovec']:
    config_h.write("#define HAVE_IOVEC 1\n")

if env['fdt']:
    config_h.write("#define HAVE_FDT 1\n")

env['usb'] = usb
env['tools'] = "qemu-img qemu-nbd"

config_h.close()

env.Append(CCFLAGS = CFLAGS)
env.Append(LINKFLAGS = LDFLAGS)
env['aiolibs'] = AIOLIBS

env['targets'] = []
for target in env['target_list'].split():
    target_d = {}
    env['targets'].append(target_d)
    target_dir = "%s/%s" % (env['source_path'], target)
    target_d['dir'] = target_dir
    t_config_h = open("%s/config.h" % target_dir, 'w')
    target_cpu = target_dir.split('-')[0]
    target_softmmu = True
    target_user_only = False
    target_linux_user = False
    target_darwin_user = False
    target_bsd_user = False

    if not target_user_only and check_gfx and not env['sdl'] and not cocoa:
        print("ERROR: QEMU requires SDL or Cocoa for GUI output")
        print("To build QEMU without graphical output configure with --disable-gfx-check")
        print("Note this will disable all output from the virtual graphics card")
        print("except through VNC or curses.")
        exit_with_error()

    try:
        os.mkdir(target_dir)
        os.mkdir("%s/fpu" % target_dir)
        os.mkdir("%s/tcg" % target_dir)
    except OSError:
        pass 

    t_config_h.write("// Automatically generated by SConfigre - do not modify\n")
    t_config_h.write("#include \"../config-host.h\"\n")

    bflt = False
    elfload32 = False
    target_nptl = False
#    interp_prefix1 = 
    
    target_d['arch'] = env['cpu']
    if env['cpu'] == "i386":
        t_config_h.write("#define TARGET_ARCH \"i386\"\n")
        t_config_h.write("#define TARGET_I386 1\n")
        if env['kvm']:
            t_config_h.write("#define CONFIG_KVM 1\n")
        if env['kqemu']:
            t_config_h.write("#define USE_KQEMU 1\n")
    elif env['cpu'] == "x86_64":
        t_config_h.write("#define TARGET_ARCH \"x86_64\"\n")
        t_config_h.write("#define TARGET_I386 1\n")
        t_config_h.write("#define TARGET_X86_64 1\n")
        if env['kvm']:
            t_config_h.write("#define CONFIG_KVM 1\n")
        if env['kqemu']:
            t_config_h.write("#define USE_KQEMU 1\n")
    else:
        print("ERROR: Unknown CPU type %s" % env['cpu'])
        exit_with_error()

    target_d['softmmu'] = target_softmmu
    if target_softmmu:
        t_config_h.write("#define CONFIG_SOFTMMU 1\n")
    target_d['user_only'] = target_user_only
    if target_user_only:
        t_config_h.write("#define CONFIG_USER_ONLY 1\n")
    target_d['linux_user'] = target_linux_user
    if target_linux_user:
        t_config_h.write("#define CONFIG_LINUX_USER 1\n")
    target_d['darwin_user'] = target_darwin_user
    if target_darwin_user:
        t_config_h.write("#define CONFIG_DARWIN_USER 1\n")

    # No need for softfloat in i386 and x86_64
    target_d['softfloat'] = False

    target_d['bflt'] = (target_user_only and bflt)
    if target_user_only and bflt:
        t_config_h.write("#define TARGET_HAS_BFLT 1\n")

    target_d['nplt'] = (target_user_only and env['nplt'] and target_nptl)
    if target_user_only and env['nplt'] and target_nptl:
        t_config_h.write("#define USE_NPTL 1\n")

    target_d['elfload32'] = (target_user_only and elfload32)
    if target_user_only and elfload32:
        t_config_h.write("#define TARGET_HAS_ELFLOAD32 1\n")

    t_config_h.close()

ret_str = "success"
Return('ret_str')
