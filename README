This is a set of tools we use for dealing with simulation results that come out
of marss. 

I sincerely apologize for the code you're about to witness it was written in an
evolutionary style so it's not particularly clean or elegant, but some of it
might be useful for people to look at to design their own helper scripts.

I'll eventually try to write up some stuff about what there are intended to do
...

The graphing scripts rely heavily on numpy and matplotlib, which are excellent
math and plotting libraries, respectively. 

More details to come.

1. Emailer Scripts

1.1 XOauth
=================================================================================
The two gmail scripts here use a token-based authentication system which
doesn't require a password. This means that you don't have to put your gmail
password in plaintext on your hard drive and the tokens can be revoked via your
gmail account in case someone gets access to them. For more details, see:
http://code.google.com/apis/gmail/oauth/ 

While your key is disposable and won't let someone change your password, it
will allow someone to send and receive email from your account, so please don't
go accidentally submitting your file to a git repo or in a patch or something. 

If you do, however, make sure to revoke this key in your google account
settings.


To use the scripts, you're going to need to use the xoauth.py file (which is
google's sample script, not mine) to generate an xoauth.txt file.

First, run: $ ./xoauth.py --generate_oauth_token --user=YOUR_USERNAME@gmail.com

This will give you a URL to go to which will either use your logged in account
or will ask you to login. After you enter in your verification code, the xoauth
script will generate an xoauth.txt file for you. 

1.2 Testing out the passwordless gmail
================================================================================
Adjust the paths in your config.py so that they match your actual system (use
config.py.example as a starting point). 

After you have an xoauth.txt and the correct paths in config.py, you can test
to see that everything went fine by running 

$ ./send_gmail.py 

This will use your xoauth information to send an email to whatever address you
have specified in your config.py file as the destination address from the
account for which you have a token (these can be the same account). 

If you receieve the email successfully, then the xoauth is working. 

1.3 Polling gmail
================================================================================
After the xoauth is working, you can also use the poll_gmail.py script which
will login to gmail, get the unread messages from a specific label, and send
back a simulation status report. 

For now the simulation status report is generated in sim_status.py and this
file tends to be sort of specific to what I name my disk images/screen
sessions/etc. So, please change it to suit your own simulation setup.

Running: 

$ ./poll_gmail.py 

Should either report that there are no messages in the target gmail lable, or
send a simulation status string to the email address given in your config.py.

This should be scheduled as a cron job. To keep cron from sending you the
output to your mailbox, I've included a wrapper script called poll_gmail.sh
which kills the output of the script. So you should adjust the path to your
utils folder in this file and run: 


crontab -e

An editor will come up with the cron file; add the line: 

*/3 * * * * $HOME/marss.utils/poll_gmail.sh

(change the 3 to the polling frequency in minutes).

2. Graphing Scripts
================================================================================
These use matplotlib and numpy. The basic output file format is a csv file with
the first line being headers and subsequent lines being data. So for example: 

cycle_number,bandwidth,latency
1000,5.4,122
2000,5.1,132
3000,5.2,130

the bottom of graph_and_send.py has a giant array of elements which construct
the graphs. I'll write more about this later. 

